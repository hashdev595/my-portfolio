{"version":3,"sources":["../src/providers/openai.ts","../src/providers/gemini.ts","../src/context/AIProviderContext.tsx","../src/hooks/useAI.tsx","../src/hooks/useImageAI.tsx","../src/index.ts"],"names":["out","useState","useCallback"],"mappings":"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","file":"index.mjs","sourcesContent":["import { AIProvider, Message } from './types';\nimport OpenAI from 'openai';\n\nexport interface OpenAIOptions {\n  apiKey: string;\n  baseUrl?: string; // optional custom base url\n  model?: string;\n  extraHeaders?: Record<string, string>; // e.g., HTTP-Referer, X-Title for OpenRouter rankings\n  dangerouslyAllowBrowser?: boolean;\n}\n\nexport function createOpenAIProvider(opts: OpenAIOptions): AIProvider {\n  const baseURL = opts.baseUrl || 'https://openrouter.ai/api/v1';\n  let model = opts.model || 'openai/gpt-4o-mini';\n  const isProxy = typeof baseURL === 'string' && baseURL.startsWith('/');\n\n  // If pointing to a same-origin proxy (e.g., \"/api/openai\"), avoid instantiating the browser SDK entirely.\n  // That prevents browser-environment guards while keeping secrets server-side.\n  const client = !isProxy\n    ? new OpenAI({\n        apiKey: opts.apiKey,\n        baseURL,\n        dangerouslyAllowBrowser: opts.dangerouslyAllowBrowser ?? true,\n      })\n    : null;\n\n  async function chat(messages: Message[]): Promise<Message[]> {\n    // Allow the caller to send a system message like: {role:'system', content:'model: anthropic/claude-3.5-sonnet'}\n    const sys = messages.find(m => m.role === 'system' && typeof m.content === 'string' && (m.content as string).startsWith('model:'));\n    if (sys) {\n      const parts = (sys.content as string).split(':');\n      if (parts[1]) model = parts.slice(1).join(':').trim();\n    }\n    if (!isProxy && client) {\n      const completion = await client.chat.completions.create({\n        model,\n        messages: messages.map(m => ({ role: m.role as any, content: m.content })),\n        extra_headers: opts.extraHeaders,\n      } as any);\n\n      const out: Message[] = [];\n      if (completion.choices && completion.choices.length) {\n        for (const ch of completion.choices) {\n          const content = ch.message?.content;\n          if (content) {\n            out.push({ role: (ch.message?.role as any) || 'assistant', content });\n          }\n        }\n      }\n      return out;\n    }\n\n    // Proxy path: call OpenAI-compatible route without exposing keys\n    const resp = await fetch(`${baseURL}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(opts.extraHeaders || {}),\n      },\n      body: JSON.stringify({ model, messages }),\n    });\n    if (!resp.ok) {\n      const text = await resp.text();\n      throw new Error(`OpenAI chat (proxy) error: ${resp.status} ${text}`);\n    }\n    const data = await resp.json();\n    const out: Message[] = [];\n    if (data.choices && data.choices.length) {\n      for (const ch of data.choices) {\n        const content = ch.message?.content;\n        if (content) out.push({ role: ch.message?.role || 'assistant', content });\n      }\n    }\n    return out;\n  }\n\n  async function generateImage(prompt: string): Promise<string> {\n    // When using proxy, do not send Authorization; let server add secrets\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(opts.extraHeaders || {}),\n    };\n    if (!isProxy) {\n      headers['Authorization'] = `Bearer ${opts.apiKey}`;\n    }\n    const resp = await fetch(`${baseURL}/images/generations`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({ prompt, n: 1, size: '1024x1024' }),\n    });\n    if (!resp.ok) {\n      const text = await resp.text();\n      throw new Error(`OpenAI image error: ${resp.status} ${text}`);\n    }\n    const data = await resp.json();\n    if (data.data && data.data[0]) {\n      if (data.data[0].url) return data.data[0].url;\n      if (data.data[0].b64_json) {\n        const raw: string = data.data[0].b64_json;\n        return raw.startsWith('data:') ? raw : `data:image/png;base64,${raw}`;\n      }\n    }\n    throw new Error('OpenAI image: unexpected response');\n  }\n\n  return {\n    id: 'openai',\n    chat,\n    generateImage,\n  };\n}\n","import { AIProvider as AIProviderInterface, Message } from \"./types\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nexport function createGeminiProvider({ apiKey, model = \"gemini-1.5-pro\", ...options }: { apiKey: string; model?: string; [key: string]: any }): AIProviderInterface {\n  if (!apiKey) {\n    throw new Error(\"Gemini provider requires apiKey.\");\n  }\n\n  const genAI = new GoogleGenerativeAI(apiKey);\n  const modelInstance = genAI.getGenerativeModel({ model });\n\n  return {\n    id: \"gemini\",\n    chat: async (messages: Message[]) => {\n      // Convert messages to Gemini-compatible format\n      const contents = messages.map((m) => {\n        let role = m.role;\n\n        // Gemini does not support \"system\" role → treat it as \"user\"\n        if (role === \"system\") role = \"user\";\n        if (role === \"assistant\") role = \"model\"; // Gemini expects \"model\"\n\n        return {\n          role,\n          parts: [{ text: m.content }],\n        };\n      });\n\n      const result = await modelInstance.generateContent({ contents });\n\n      const text = result.response.text();\n\n      return [\n        {\n          role: \"assistant\",\n          content: text,\n        },\n      ];\n    },\n  };\n}\n","\"use client\";\nimport * as React from 'react';\nimport { createContext, useContext, useMemo, ReactNode } from 'react';\nimport { AIProvider as AIProviderInterface, ProviderId } from '../providers/types';\nimport { createOpenAIProvider } from '../providers/openai';\nimport { createGeminiProvider } from '../providers/gemini';\n\nexport interface AIProviderContextValue {\n  provider: AIProviderInterface;\n}\n\nconst AIContext = createContext<AIProviderContextValue | null>(null);\n\nexport interface AIProviderProps {\n  children: ReactNode;\n  provider?: ProviderId;\n  apiKey?: string;\n  options?: any;\n}\n\nexport const AIProvider: React.FC<AIProviderProps> = ({ children, provider = 'openai', apiKey, options }) => {\n  const prov = useMemo<AIProviderInterface>(() => {\n    if (provider === 'openai') {\n      if (!apiKey) throw new Error('OpenAI provider requires apiKey.');\n      return createOpenAIProvider({ apiKey, ...options });\n    }\n\n    if (provider === 'gemini') {\n      if (!apiKey) throw new Error('Gemini provider requires apiKey.');\n      return createGeminiProvider({ apiKey, ...options });\n    }\n\n    throw new Error(`Unknown provider: ${provider}`);\n  }, [provider, apiKey, JSON.stringify(options || {})]);\n\n  return <AIContext.Provider value={{ provider: prov }}>{children}</AIContext.Provider>;\n};\n\nexport function useAIProviderContext(): AIProviderContextValue {\n  const ctx = useContext(AIContext);\n  if (!ctx) throw new Error('useAIProviderContext must be used inside AIProvider');\n  return ctx;\n}\n","\"use client\";\nimport { useCallback, useState } from 'react';\nimport { Message, Role } from '../providers/types';\nimport { useAIProviderContext } from '../context/AIProviderContext';\n\nexport function useAI(initialSystemPrompt?: string) {\n  const { provider } = useAIProviderContext();\n  const [messages, setMessages] = useState<Message[]>(\n    initialSystemPrompt \n      ? [{ role: 'system' as Role, content: initialSystemPrompt }] \n      : []\n  );\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const sendMessage = useCallback(async (content: string) => {\n    setLoading(true);\n    setError(null);\n    const next: Message[] = [...messages, { role: 'user' as Role, content }];\n    setMessages(next);\n    try {\n      const replies = await provider.chat(next);\n      const merged: Message[] = [...next, ...replies];\n      setMessages(merged);\n      setLoading(false);\n      return replies;\n    } catch (e) {\n      setError(e as Error);\n      setLoading(false);\n      throw e;\n    }\n  }, [provider, messages]);\n\n  return { messages, sendMessage, loading, error, setMessages };\n}\n","\"use client\";\nimport { useState, useCallback } from 'react';\nimport { useAIProviderContext } from '../context/AIProviderContext';\n\nexport function useImageAI() {\n  const { provider } = useAIProviderContext();\n  const [image, setImage] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const generateImage = useCallback(async (prompt: string) => {\n    if (!provider.generateImage) throw new Error('Provider does not support image generation');\n    setLoading(true);\n    setError(null);\n    try {\n      const url = await provider.generateImage(prompt);\n      setImage(url);\n      setLoading(false);\n      return url;\n    } catch (e) {\n      setError(e as Error);\n      setLoading(false);\n      throw e;\n    }\n  }, [provider]);\n\n  return { image, generateImage, loading, error, setImage };\n}\n","\"use client\";\n\nexport { AIProvider, useAIProviderContext } from './context/AIProviderContext';\nexport { useAI } from './hooks/useAI';\nexport { useImageAI } from './hooks/useImageAI';\nexport type { \n  Message,\n  Role,\n  AIProvider as AIProviderType,\n  ProviderId \n} from './providers/types';\n\nexport function sum(a: number, b: number): number {\n  return a + b;\n}\n"]}