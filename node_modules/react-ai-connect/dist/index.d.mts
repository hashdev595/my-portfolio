import * as react from 'react';
import { ReactNode } from 'react';

type Role = 'user' | 'assistant' | 'system' | 'tool';
type ContentPartText = {
    type: 'text';
    text: string;
};
type ContentPartImageUrl = {
    type: 'image_url';
    image_url: {
        url: string;
    };
};
type MessageContent = string | Array<ContentPartText | ContentPartImageUrl>;
interface Message {
    role: Role;
    content: MessageContent;
}
interface AIProvider$1 {
    id: string;
    chat: (messages: Message[]) => Promise<Message[]>;
    generateImage?: (prompt: string) => Promise<string>;
}
type ProviderId = "gemini" | "openai";

interface AIProviderContextValue {
    provider: AIProvider$1;
}
interface AIProviderProps {
    children: ReactNode;
    provider?: ProviderId;
    apiKey?: string;
    options?: any;
}
declare const AIProvider: react.FC<AIProviderProps>;
declare function useAIProviderContext(): AIProviderContextValue;

declare function useAI(initialSystemPrompt?: string): {
    messages: Message[];
    sendMessage: (content: string) => Promise<Message[]>;
    loading: boolean;
    error: Error | null;
    setMessages: react.Dispatch<react.SetStateAction<Message[]>>;
};

declare function useImageAI(): {
    image: string | null;
    generateImage: (prompt: string) => Promise<string>;
    loading: boolean;
    error: Error | null;
    setImage: react.Dispatch<react.SetStateAction<string | null>>;
};

declare function sum(a: number, b: number): number;

export { AIProvider, type AIProvider$1 as AIProviderType, type Message, type ProviderId, type Role, sum, useAI, useAIProviderContext, useImageAI };
